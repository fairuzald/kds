services:
  postgres:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-bacterial_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-bacterial_classification}
    ports:
      - "5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER:-bacterial_user} -d $${POSTGRES_DB:-bacterial_classification}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./ml/models:/app/ml_models
    env_file:
      - .env
    ports:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # volumes:
      # - ./frontend:/usr/src/app
      # - /usr/src/app/node_modules
    ports:
      - "5173"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    depends_on:
      - backend
    networks:
      - app-network
    # command: ["bun", "run", "dev", "--host", "0.0.0.0"]
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    volumes:
      - ./scraper:/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: tail -f /dev/null

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
